import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,b as s,d as a,e,w as t,r as k,o as r}from"./app-YvOG1S1M.js";const d={},o={start:"2"};function g(c,i){const l=k("RouteLink");return r(),p("div",null,[i[22]||(i[22]=n('<h1 id="rvs-1-ravenscrpit" tabindex="-1"><a class="header-anchor" href="#rvs-1-ravenscrpit"><span>rvs.1 Ravenscrpit</span></a></h1><h2 id="_2-0-何为ravenscrpit" tabindex="-1"><a class="header-anchor" href="#_2-0-何为ravenscrpit"><span>-2.0 何为Ravenscrpit？</span></a></h2><p>Ravenscrpit是一个基于Lua的游戏语言（其实就是Lua），为了Ravenfield的模组化开发</p><p>它的诞生基于<a href="https://www.moonsharp.org/" target="_blank" rel="noopener noreferrer">MoonSharp Project</a>（可惜自2016年就没了更新，官方仓库堆了一堆PR）</p><p>Ravenscript可以控制Ravenfield和Unity引擎的某些部分</p><p>因此它具有与Unity开发中的C#具有相同的逻辑与操作</p><p>所以，建议你先入门Unity C#开发，再入门Ravenscript，有助于你更顺利的理解一些概念</p><h2 id="_1-0-环境配置" tabindex="-1"><a class="header-anchor" href="#_1-0-环境配置"><span>-1.0 环境配置</span></a></h2><p><strong>此处不再详细说明，如果你有看过相关编程语言的教程，对下面的事情你应该会很快上手</strong></p><p><strong>详情请参考官方文档</strong></p><ol><li>安装 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&amp;logo=visualstudiocode" alt="Install in VS Code" title="Install in VS Code"></a>作为IDE</li></ol><p>或者自行选择一个合适的编辑器,以下内容部分仅适用VSCode</p>',12)),s("ol",o,[i[4]||(i[4]=s("li",null,[s("p",null,[a("安装Chinese-Simple语言扩展包"),s("a",{href:"https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans",target:"_blank",rel:"noopener noreferrer"},[s("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"})])])],-1)),s("li",null,[s("p",null,[i[1]||(i[1]=a("安装vscode-lua扩展")),i[2]||(i[2]=s("a",{href:"https://marketplace.visualstudio.com/items?itemName=sumneko.lua",target:"_blank",rel:"noopener noreferrer"},[s("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"})],-1)),i[3]||(i[3]=a("并安装")),e(l,{to:"/cn/Project/rsidea.html"},{default:t(()=>i[0]||(i[0]=[a("RSIDEA")])),_:1,__:[0]})])]),i[5]||(i[5]=s("li",null,[s("p",null,[a("安装C#扩展"),s("a",{href:"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp",target:"_blank",rel:"noopener noreferrer"},[s("img",{src:"https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&logo=visualstudiocode",alt:"Install in VS Code",title:"Install in VS Code"})])])],-1)),i[6]||(i[6]=s("li",null,[s("p",null,"配置工作区的.vscode\\settings.json为：")],-1))]),i[23]||(i[23]=n(`<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //配置文件扩展名关联</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;files.associations&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;*.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lua&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//隐藏meta文件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;files.exclude&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;**/*.meta&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><p>配置VSCode为Unity的外部编辑器</p></li><li><p>（可选）安装Debug扩展<a href="https://marketplace.visualstudio.com/items?itemName=xanathar.moonsharp-debug" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/VS Code-Install-blue?style=for-the-badge&amp;logo=visualstudiocode" alt="Install in VS Code" title="Install in VS Code"></a></p></li><li><p>（可选）安装<a href="https://www.bilibili.com/read/cv8997496/" target="_blank" rel="noopener noreferrer">BepInEx</a>并启用控制台（方便调取RS输出）</p></li></ol><h2 id="_1-0-文件结构" tabindex="-1"><a class="header-anchor" href="#_1-0-文件结构"><span>1.0 文件结构</span></a></h2><p>标准的RS脚本一般分为3个结构：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 注册RS父table，这样你才能从里面派生方法并让游戏执行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">behavior</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> local变量，（现在这一步是可选的）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> var1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 定义事件方法体</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --这是对#2的另一种替代</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.var1 = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[i[8]||(i[8]=a("在此示例中，第一部分的作用是向Ravenscript解释器要求注册一个名为")),i[9]||(i[9]=s("code",null,"test",-1)),i[10]||(i[10]=a("的table（应与")),e(l,{to:"/cn/Components/ScriptedBehaviour.html"},{default:t(()=>i[7]||(i[7]=[a("ScriptedBehaviour")])),_:1,__:[7]}),i[11]||(i[11]=a("的")),i[12]||(i[12]=s("code",null,"behaviour",-1)),i[13]||(i[13]=a("的值一致，或与文件名一致），调用此方法后解释器会在当前环境中创建一个名为")),i[14]||(i[14]=s("code",null,"test",-1)),i[15]||(i[15]=a("的table，这个table派生于")),i[16]||(i[16]=s("a",{href:"http://ravenfieldgame.com/ravenscript/api/ScriptedBehaviour.html",target:"_blank",rel:"noopener noreferrer"},"ScriptedBehaviour",-1)),i[17]||(i[17]=a("，用于定义self指针包含的内容方便调用，并注复制test外部的local（即第二步定义的局部变量）进")),i[18]||(i[18]=s("code",null,"test",-1))]),i[24]||(i[24]=n(`<p>在第二部分中，在外部定义变量而不是在方法体内定义的原因时各个方法体的局部变量不可互相访问，在外部定义就可以直接通过self指针（例如<code>self.var1</code>）在table方法体内部全局读写变量（但因为解释器的逻辑，你不能在此处使用RS的Api初始化值？）</p><p>在第三部分中，你可以选择从注册的table派生一些一些方法，解释器会在游戏运行期间调用它们， <code>Awake</code>、<code>OnEnable</code>、<code>OnDisable</code>、<code>OnDestroy</code>、<code>Start</code>、<code>Update</code>、<code>LateUpdate</code>、<code>FixedUpdate</code>、<code>OnAnimatorIK</code>这些都是默认可用的方法名，他们的意义与执行顺序与Unity C#的一致，你可以参考<a href="https://docs.unity3d.com/cn/2020.3/Manual/ExecutionOrder.html" target="_blank" rel="noopener noreferrer">Unity文档</a></p><p>至于为什么Ravenscript与Unity C#一样，不像一般类似python编程一样直接在文件里贴代码，你可以自行探讨unity C#的工作流程</p><h2 id="_1-1-文档使用方法" tabindex="-1"><a class="header-anchor" href="#_1-1-文档使用方法"><span>1.1 文档使用方法</span></a></h2><p>打开官方的<a href="http://ravenfieldgame.com/ravenscript/api.html" target="_blank" rel="noopener noreferrer">Ravenscrpit的文档</a></p><h3 id="类class" tabindex="-1"><a class="header-anchor" href="#类class"><span>类Class</span></a></h3><p>尽管文档没有标注，首先你仍需要明白文档中那些classes（其实classes这个名称并不准确？）可以分别是怎么用的</p><p>即哪些类已经实例化或者本身为静态可以直接作为api对象进行调用（如<a href="http://ravenfieldgame.com/ravenscript/api/Player.html" target="_blank" rel="noopener noreferrer">Player</a>,它可以直接在脚本里<code>Player.actor.health =9999</code>这样直接调用 ）</p><p>哪些是作为“数据类型”需要先实例化这个类才能使用（如<a href="http://ravenfieldgame.com/ravenscript/api/Actor.html" target="_blank" rel="noopener noreferrer">类Actor</a>，它需要先在一个Bot的GameObject上通过<code>GameObject.GetComponentInParent(Actor)</code>，“get”了这个类才能使用 ）</p><p>那些是作为enum枚举类使用(如<a href="http://ravenfieldgame.com/ravenscript/api/AudioMixer.html" target="_blank" rel="noopener noreferrer">AudioMixer</a>，用于枚举Audio Source的Output配置)</p><p>官方并没有标注这些内容，这需要您按照逻辑思维与常识自行探索</p><h3 id="类成员与类型、关键字" tabindex="-1"><a class="header-anchor" href="#类成员与类型、关键字"><span>类成员与类型、关键字</span></a></h3><p>点击一个类的文档，在Details一栏，你会发现这样的一些文本，下面是这些类成员的描述</p><p>它们分为构建函数（Constructors，部分，参考C#）、成员属性（Members，参考C#）、成员方法（Methods，部分，参考C#）、成员事件（Events，部分）</p><p>构建函数用于实例化一个新类，需要按函数重载传入一些初始值，之后函数会返回实例化的新类</p><p>在成员属性中，如<a href="http://ravenfieldgame.com/ravenscript/api/Actor.html#_CPPv4N5Actor7balanceE" target="_blank" rel="noopener noreferrer">这个</a>：</p><p><img src="https://ravenfieldcommunity.github.io/docs-img/Tutorials/rvs.1.001.png" alt=""></p><p>float表示这个属性的类型是float浮点数，balance表示这个属性的名字，其他的类似，RS自带的内建类类型会提供一个超链接高亮显示</p><p>可能你也会看到一些诸如const、static这样的关键字（类似于“标识符”），他们的含义如下：</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>const</td><td>表示这个属性是常量，指向的内容不可更改（即使玩家层面可见的变更，但指向的内容里的东西可以修改）</td></tr><tr><td>static</td><td>静态属性，无论如何类实例化，返回值不受实例的类影响，始终一致（不需要GetComponent即可使用）</td></tr></tbody></table><p>在成员方法中，如<a href="http://ravenfieldgame.com/ravenscript/api/Actor.html#_CPPv4N5Actor14CanBeDamagedByE6Weapon" target="_blank" rel="noopener noreferrer">这个</a>：</p><p><img src="https://ravenfieldcommunity.github.io/docs-img/Tutorials/rvs.1.002.png" alt=""></p><p>方法名前的是方法返回的数据的类型（如果是void则表示无返回值），<code>seat</code>表示的是参数，前头的<code>Seat</code>表示的是这个参数的类型</p><p>一个方法可能有多个重载，你可以按需求使用合适的重载</p><p>在成员事件中，如<a href="http://ravenfieldgame.com/ravenscript/api/Actor.html#_CPPv4N5Actor12onTakeDamageE" target="_blank" rel="noopener noreferrer">这个</a>：</p><p><img src="https://ravenfieldcommunity.github.io/docs-img/Tutorials/rvs.1.003.png" alt=""></p><p>这是实际上是一个为<a href="http://ravenfieldgame.com/ravenscript/api/ScriptEvent.html" target="_blank" rel="noopener noreferrer">ScriptEvent</a>类型的属性</p><p>他是这样使用的：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">behavior</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --注册事件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --\`self\`指触发事件时调用方法所在的table(ScriptedBehavior)，如果你已经获取了别的ScriptedBehavior，你也可以将self替换为ScriptedBehavior所在变量</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --\`onTakeDamage\`指触发事件时调用self所在方法的方法名，不一定非要填写属性ScriptEvent的属性名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.onTakeDamage.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AddListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;onTakeDamage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--触发事件时就会调用这个方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onTakeDamage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果你的类的ScriptEvent属性像<a href="http://ravenfieldgame.com/ravenscript/api/GameEvents.html#_CPPv4N10GameEvents14onActorCreatedE" target="_blank" rel="noopener noreferrer">GameEvents的onActorCreated</a>一样，下方的<code>callback</code>内属性不为空，这表示调用这个方法时游戏会传入的参数，你必须在你注册的方法的参数中填写这些参数，否则会报错</p><h2 id="_1-3-coding实践" tabindex="-1"><a class="header-anchor" href="#_1-3-coding实践"><span>1.3 Coding实践</span></a></h2><p>如写一个玩家血量修复的RS脚本</p><p>首先提取功能中的关键字</p><p>然后到文档的Api索引查找相关方法、member，如我们可以在Player这个类中找到可以获取玩家对应actor的menber是<code>Player.actor</code>，我们就可以在</p><p>如果找不到合适的方法，可以尝试关键词搜索，如果还找不到。那就是乌鸦没写估计，只能另辟蹊径</p><p>然后按文档提供的member和method编写脚本，不断重复这个行为</p><p>首先，我们先实现我们最<strong>核心</strong>的功能血量回复</p><p>通过<code>Input.GetKeyDown</code>的return判断按键是否按下这个是基本操作，各个Unity基础教程应该有介绍</p><p>血量回复这个功能对应的API的话，先把这个功能拆出一个词“Health”（健康），在文档里搜索</p><p>在Actor这个类里找到<code>Actor.ResupplyHealth(float health)</code>这个方法似乎有用</p><p>那类Actor是什么？</p><p>类Actor是一个管理玩家与Bot在游戏中的“属性”的一个重要的类，包括但不限于血量、所使用的武器载具、所属小队等属性</p><p>同时我们又发现<code>Player.actor</code>这个API可以让我们获取到玩家的Actor</p><p>那么，所需的方法都有了！</p><p>示例：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">behaviour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;QuickTreat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--注册Ravenscript行为，然后我们才能从这个基类派生自己的自定义类</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QuickTreat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KeyCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.P) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --当按下P键时...，通过Input.GetKeyDown的return判断按键是否按下，基本操作hhh</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ResupplyHealth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--调用Player的成员actor内的一个成员方法来回复50血量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际测试，发现没有Bug，同时发现使用<code>Player.actor.ResupplyHealth()</code>这个方法可以确保防止血量回复后健康超过最大值，这意味着我们可以减少实现这个功能的代码量</p><p>然后继续添加下一个功能冷却时间：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">behaviour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;QuickTreat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--初始化局部变量,无法从脚本外部访问</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --计时器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QuickTreat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--这个Start()函数会在游戏的一开始运行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    --在调用的变量前加一个self.防止得到的的值是nil</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timer = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.time + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --初始化计时器，计算超出冷却时间后时的游戏时间，选用这个方案的原因是Time.deltaTime似乎无法正常使用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QuickTreat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--这个Update()函数会在游戏的每帧运行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KeyCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.P) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.time &gt;= </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ResupplyHealth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">			self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timer = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.time + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --重置计时器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实际测试，发现没有Bug，然后继续添加下一个功能，不断重复这个过程，直到完成：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">behaviour</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;QuickTreat&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cooldown</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --冷却时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ratio</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --血量回复比</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> keybind</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --触发键位</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mutator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QuickTreat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--进入游戏地图的一开始时运行</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    coroutine.yield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WaitForSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--延迟运行下一行确保mutator设置加载成功</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.mutator = </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.script.mutator  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--获取此脚本绑定的mutator信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.cooldown = </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.mutator.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetConfigurationFloat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cooldown&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--获取mutator自定义选项卡中id为cooldown的float对应的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.cooldown &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --如果cooldown小于60，则重置cooldown为60</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	    self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.cooldown = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ratio = </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.mutator.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetConfigurationRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ratio&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--获取mutator自定义选项卡中id为ratio的range对应的值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.keybind = </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.mutator.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetConfigurationString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;keybind&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--获取mutator自定义选项卡中id为keybind的string对应的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.keybind == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">nil</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --如果keybind为空，则重置keybind为&quot;p&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	    self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.keybind = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;P&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timer = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.time + </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.cooldown  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--计算超出冷却时间后的游戏时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QuickTreat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeyDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.keybind) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  --当按下keybind对应的按键时...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.time &gt;= </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ResupplyHealth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Player</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.maxHealth * </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ratio)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">			self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.timer = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.time + </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.cooldown</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">			Overlay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ShowMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[QuickTreat]Sucess&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--调用Overlay.ShowMessage()来显示一行信息，后半部分的数值是消失延迟</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            Overlay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ShowMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[QuickTreat]Failure,Need delay&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当主要功能完成时，我们就可以继续下一步：添加次要功能与优化代码</p><p>优化代码这部分表现为：减少不必要的判断、运算，精简代码，将可以迁移到事件函数的判断迁移之类</p><p>此处不再赘述</p><h2 id="_1-4-在游戏测试" tabindex="-1"><a class="header-anchor" href="#_1-4-在游戏测试"><span>1.4 在游戏测试</span></a></h2>`,55)),s("p",null,[i[20]||(i[20]=a("这需要你使用")),e(l,{to:"/cn/Components/ScriptedBehaviour.html"},{default:t(()=>i[19]||(i[19]=[a("ScriptedBehaviour")])),_:1,__:[19]}),i[21]||(i[21]=a("将脚本挂载到游戏物体中"))]),i[25]||(i[25]=n('<p>你具体可以参考＠<a href="http://steamcommunity.com/profiles/76561198310507502" target="_blank" rel="noopener noreferrer">Lezvin</a>大佬翻译的这篇文档：<a href="https://blog.csdn.net/x3464/article/details/105137284" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/x3464/article/details/105137284</a></p><p>无论如何，你都要将将脚本挂载到游戏物体中，并且保证这个物体在实际游戏中会被加载</p><h2 id="_1-5-常见报错" tabindex="-1"><a class="header-anchor" href="#_1-5-常见报错"><span>1.5 常见报错</span></a></h2><h3 id="测试模式下无法重载脚本" tabindex="-1"><a class="header-anchor" href="#测试模式下无法重载脚本"><span>测试模式下无法重载脚本</span></a></h3><p>其具体表现为，点击重载键不出现加载提示：</p><p>{缺图}</p><p>正常应为：</p><p>{缺图}</p><p>请检查游戏是否可以访问这个脚本所在位置，修改Windows文件夹的安全属性（Unity游戏不支持使用管理员权限运行），或检查访问是否被拒绝</p><p>否则尝试迁移Unity项目位置</p><h2 id="_1-6-debug" tabindex="-1"><a class="header-anchor" href="#_1-6-debug"><span>1.6 Debug</span></a></h2>',11))])}const B=h(d,[["render",g],["__file","rvs.1.html.vue"]]),u=JSON.parse('{"path":"/cn/Tutorials/rvs.1.html","title":"rvs.1 Ravenscrpit","lang":"zh-CN","frontmatter":{"category":["教程"],"description":"rvs.1 Ravenscrpit -2.0 何为Ravenscrpit？ Ravenscrpit是一个基于Lua的游戏语言（其实就是Lua），为了Ravenfield的模组化开发 它的诞生基于MoonSharp Project（可惜自2016年就没了更新，官方仓库堆了一堆PR） Ravenscript可以控制Ravenfield和Unity引擎的某些...","head":[["meta",{"property":"og:url","content":"https://ravenfieldcommunity.github.io/docs/cn/Tutorials/rvs.1.html"}],["meta",{"property":"og:site_name","content":"Ravenfield社区文档"}],["meta",{"property":"og:title","content":"rvs.1 Ravenscrpit"}],["meta",{"property":"og:description","content":"rvs.1 Ravenscrpit -2.0 何为Ravenscrpit？ Ravenscrpit是一个基于Lua的游戏语言（其实就是Lua），为了Ravenfield的模组化开发 它的诞生基于MoonSharp Project（可惜自2016年就没了更新，官方仓库堆了一堆PR） Ravenscript可以控制Ravenfield和Unity引擎的某些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&logo=visualstudiocode \\"Install in VS Code\\""}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-10T12:56:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-10T12:56:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"rvs.1 Ravenscrpit\\",\\"image\\":[\\"https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&logo=visualstudiocode \\\\\\"Install in VS Code\\\\\\"\\",\\"https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&logo=visualstudiocode \\\\\\"Install in VS Code\\\\\\"\\",\\"https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&logo=visualstudiocode \\\\\\"Install in VS Code\\\\\\"\\",\\"https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&logo=visualstudiocode \\\\\\"Install in VS Code\\\\\\"\\",\\"https://img.shields.io/badge/VS%20Code-Install-blue?style=for-the-badge&logo=visualstudiocode \\\\\\"Install in VS Code\\\\\\"\\",\\"https://ravenfieldcommunity.github.io/docs-img/Tutorials/rvs.1.001.png\\",\\"https://ravenfieldcommunity.github.io/docs-img/Tutorials/rvs.1.002.png\\",\\"https://ravenfieldcommunity.github.io/docs-img/Tutorials/rvs.1.003.png\\"],\\"dateModified\\":\\"2025-05-10T12:56:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"-2.0 何为Ravenscrpit？","slug":"_2-0-何为ravenscrpit","link":"#_2-0-何为ravenscrpit","children":[]},{"level":2,"title":"-1.0 环境配置","slug":"_1-0-环境配置","link":"#_1-0-环境配置","children":[]},{"level":2,"title":"1.0 文件结构","slug":"_1-0-文件结构","link":"#_1-0-文件结构","children":[]},{"level":2,"title":"1.1 文档使用方法","slug":"_1-1-文档使用方法","link":"#_1-1-文档使用方法","children":[{"level":3,"title":"类Class","slug":"类class","link":"#类class","children":[]},{"level":3,"title":"类成员与类型、关键字","slug":"类成员与类型、关键字","link":"#类成员与类型、关键字","children":[]}]},{"level":2,"title":"1.3 Coding实践","slug":"_1-3-coding实践","link":"#_1-3-coding实践","children":[]},{"level":2,"title":"1.4 在游戏测试","slug":"_1-4-在游戏测试","link":"#_1-4-在游戏测试","children":[]},{"level":2,"title":"1.5 常见报错","slug":"_1-5-常见报错","link":"#_1-5-常见报错","children":[{"level":3,"title":"测试模式下无法重载脚本","slug":"测试模式下无法重载脚本","link":"#测试模式下无法重载脚本","children":[]}]},{"level":2,"title":"1.6 Debug","slug":"_1-6-debug","link":"#_1-6-debug","children":[]}],"git":{"createdTime":1693144979000,"updatedTime":1746881794000,"contributors":[{"name":"Leafx-code","email":"82655578+Leafx-code@users.noreply.github.com","commits":6},{"name":"KeilAwk","email":"82655578+KeilAwk@users.noreply.github.com","commits":4}]},"filePathRelative":"cn/Tutorials/rvs.1.md","localizedDate":"2023年8月27日","autoDesc":true}');export{B as comp,u as data};
